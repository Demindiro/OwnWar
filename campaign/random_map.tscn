[gd_scene load_steps=7 format=2]

[ext_resource path="res://camera/free_camera.gd" type="Script" id=1]
[ext_resource path="res://addons/tiles/grass/grass_0.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "tool

extends Spatial


export(int) var rng_seed
export(int) var length = 10



func f(x, z):
	return cos(x / 4) * sin(z / 4) * 4
	

func df(x, z):
	var dx = f(x - 0.5, z) - f(x + 0.5, z)
	var dz = f(x, z - 0.5) - f(x, z + 0.5)
	return Vector3(dx, 1, dz).normalized()


func _ready():
	var rng = RandomNumberGenerator.new()

	var vertices = []
	var uvs = []
	var normals = []
	var indices = []

	for a in range(length * 2 + 1):
		var b_len = length * 2 - abs(length - a) + 1
		var b_offset = float(b_len) / 2
		for b in range(b_len):
			var x = float(b) - b_offset
			var z = float(a) * cos(PI / 6)
			var y = f(x, z)
			vertices.append(Vector3(x, y, z))
			uvs.append(Vector2(x, z))
			normals.append(df(x, z))
	set_indices_bottom(indices)
	set_indices_top(indices)

	var array = []
	normals.resize(len(vertices))
	array.resize(Mesh.ARRAY_MAX)
	array[Mesh.ARRAY_VERTEX] = PoolVector3Array(vertices)
	array[Mesh.ARRAY_TEX_UV] = PoolVector2Array(uvs)
	array[Mesh.ARRAY_NORMAL] = PoolVector3Array(normals)
	array[Mesh.ARRAY_INDEX] = PoolIntArray(indices)
	$Ground/MeshInstance.mesh = ArrayMesh.new()
	$Ground/MeshInstance.mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, array)
	$Ground/MeshInstance.mesh.regen_normalmaps()
	
	var concave_triangles = PoolVector3Array()
	for i in indices:
		concave_triangles.append(vertices[i])
	print(len(concave_triangles))
	$Ground/CollisionShape.shape.set_faces(concave_triangles)
	print(len($Ground/CollisionShape.shape.get_faces()))


func set_indices_bottom(indices):
	var start = 0
	var segment_length = length + 1
	var end = start + segment_length
	for _n in range(length):
		for i in range(start, end - 1):
			indices.append(i)
			indices.append(i + 1)
			indices.append(i + segment_length + 1)
		for i in range(start, end):
			indices.append(i)
			indices.append(i + segment_length + 1)
			indices.append(i + segment_length)
		segment_length += 1
		start = end
		end = start + segment_length


func set_indices_top(indices):
	var start = (length + 1) * length + (length * (length - 1) / 2)
	var segment_length = length * 2 + 1
	var end = start + segment_length
	for _n in range(length):
		for i in range(start, end - 1):
			indices.append(i)
			indices.append(i + 1)
			indices.append(i + segment_length)
		for i in range(start + 1, end - 1):
			indices.append(i)
			indices.append(i + segment_length)
			indices.append(i + segment_length - 1)
		segment_length -= 1
		start = end
		end = start + segment_length
"

[sub_resource type="ConcavePolygonShape" id=6]

[sub_resource type="SpatialMaterial" id=3]
albedo_texture = ExtResource( 2 )

[sub_resource type="BoxShape" id=5]

[node name="RandomMap" type="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 6.89004, 0 )
script = SubResource( 1 )

[node name="Ground" type="StaticBody" parent="."]

[node name="CollisionShape" type="CollisionShape" parent="Ground"]
shape = SubResource( 6 )

[node name="MeshInstance" type="MeshInstance" parent="Ground"]
material_override = SubResource( 3 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( -1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 4.03202, -6.02818 )
script = ExtResource( 1 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 10.9466, 9.71476 )

[node name="RigidBody" type="RigidBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -5.67807, 7.81616, 0 )

[node name="CollisionShape2" type="CollisionShape" parent="RigidBody"]
shape = SubResource( 5 )
