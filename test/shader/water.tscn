[gd_scene load_steps=7 format=2]

[ext_resource path="res://camera/free_camera.gd" type="Script" id=1]
[ext_resource path="res://addons/tiles/water/water_1.jpg" type="Texture" id=2]
[ext_resource path="res://addons/tiles/water/water_1_normal.png" type="Texture" id=3]

[sub_resource type="PlaneMesh" id=1]
size = Vector2( 10, 10 )
subdivide_width = 200
subdivide_depth = 50

[sub_resource type="Shader" id=2]
code = "shader_type spatial;


uniform vec2 amplitude = vec2(0.2, 0.1);
uniform vec2 frequency = vec2(3.0, 2.5);
uniform vec2 time_factor = vec2(0.5, 1.0);
uniform sampler2D texturemap : hint_albedo;
uniform sampler2D normalmap : hint_albedo;
uniform vec2 uv_offset = vec2(0.0, 0.0);
uniform vec2 uv_scale = vec2(1.0, 1.0);


float height(vec2 position, float time) {
	vec2 result = amplitude * sin(position * frequency + time_factor * time);
	return result.x + result.y;
}


void vertex() {
	VERTEX.y += height(VERTEX.xz, TIME);
	float dx = height(VERTEX.xz + vec2(0.2, 0), TIME) - height(VERTEX.xz - vec2(0.2, 0), TIME);
	float dz = height(VERTEX.xz + vec2(0, 0.2), TIME) - height(VERTEX.xz - vec2(0, 0.2), TIME);
	BINORMAL = normalize(vec3(0.4, dx, 0.0));
	TANGENT = normalize(vec3(0.0, dz, 0.4));
	NORMAL = cross(TANGENT, BINORMAL);
	UV = UV * uv_scale + uv_offset + time_factor * TIME;
//	vec2 differential_result = amplitude.xy * frequency.xy * cos(VERTEX.xz * frequency.xy);
//	TANGENT = normalize(vec3(differential_result.x, 1.0 / differential_result.x, 0));
//	BINORMAL = normalize(vec3(0, 1.0 / differential_result.y, differential_result.y));
//	NORMAL = normalize(cross(TANGENT, BINORMAL));
//	NORMAL = normalize(vec3(differential_result.y, 0, differential_result.y));
}


void fragment() {
	ALBEDO.rgb = texture(texturemap, UV).rgb;
	ALPHA = clamp((ALBEDO.r + ALBEDO.g + ALBEDO.b) * 0.2 + 0.4, 0.0, 1.0);
	NORMALMAP = texture(normalmap, UV).rgb;
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/amplitude = Vector2( 0.2, 0.1 )
shader_param/frequency = Vector2( 3, 2.5 )
shader_param/time_factor = Vector2( 0.5, 1 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/uv_scale = Vector2( 10, 10 )
shader_param/texturemap = ExtResource( 2 )
shader_param/normalmap = ExtResource( 3 )

[node name="Water" type="Node"]

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 1 )
material/0 = SubResource( 3 )

[node name="Camera" type="Camera" parent="."]
script = ExtResource( 1 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.891816, -1.32891e-08, 0.452397, -0.267362, 0.806679, 0.527055, -0.364939, -0.59099, 0.719409, 0, 4.46079, 0 )
